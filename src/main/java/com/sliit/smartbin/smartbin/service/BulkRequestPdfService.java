package com.sliit.smartbin.smartbin.service;

import com.itextpdf.html2pdf.HtmlConverter;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.element.Cell;
import com.sliit.smartbin.smartbin.dto.BulkRequestDTO;
import com.sliit.smartbin.smartbin.model.BulkRequestStatus;
import com.sliit.smartbin.smartbin.model.PaymentStatus;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * Service for generating PDF reports for bulk requests
 * 
 * SOLID PRINCIPLES APPLIED:
 * 
 * S - Single Responsibility Principle (SRP):
 *     This service has ONE responsibility: Generate PDF reports for bulk requests.
 * 
 * D - Dependency Inversion Principle (DIP):
 *     Service depends on abstractions (DTOs) rather than concrete database entities.
 * 
 * O - Open/Closed Principle (OCP):
 *     Can be extended to support different PDF formats without modifying existing code.
 */
@Service
public class BulkRequestPdfService {

    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
    private static final DateTimeFormatter DATE_ONLY_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    /**
     * Generate PDF report for all bulk requests
     * 
     * @param bulkRequests List of bulk requests to include in report
     * @param reportTitle Title for the report
     * @param userInfo User information for the report header
     * @return ByteArrayOutputStream containing the PDF data
     */
    public ByteArrayOutputStream generateBulkRequestsReport(List<BulkRequestDTO> bulkRequests, 
                                                           String reportTitle, 
                                                           String userInfo) throws IOException {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PdfWriter writer = new PdfWriter(outputStream);
        PdfDocument pdf = new PdfDocument(writer);
        Document document = new Document(pdf);

        // Add title and header information
        addReportHeader(document, reportTitle, userInfo);
        
        // Add summary statistics
        addSummarySection(document, bulkRequests);
        
        // Add detailed table
        addBulkRequestsTable(document, bulkRequests);
        
        // Add footer
        addReportFooter(document);

        document.close();
        return outputStream;
    }

    /**
     * Generate PDF report for bulk requests by status
     * 
     * @param bulkRequests List of bulk requests filtered by status
     * @param status Filter status used for the report
     * @param userInfo User information for the report header
     * @return ByteArrayOutputStream containing the PDF data
     */
    public ByteArrayOutputStream generateBulkRequestsByStatusReport(List<BulkRequestDTO> bulkRequests,
                                                                  BulkRequestStatus status,
                                                                  String userInfo) throws IOException {
        String reportTitle = "Bulk Requests Report - " + status.name().replace("_", " ");
        return generateBulkRequestsReport(bulkRequests, reportTitle, userInfo);
    }

    /**
     * Generate HTML content for bulk requests report (alternative method)
     * 
     * @param bulkRequests List of bulk requests
     * @param reportTitle Title for the report
     * @param userInfo User information
     * @return HTML string
     */
    public String generateBulkRequestsHtmlReport(List<BulkRequestDTO> bulkRequests, 
                                               String reportTitle, 
                                               String userInfo) {
        StringBuilder html = new StringBuilder();
        
        html.append("<!DOCTYPE html>");
        html.append("<html><head>");
        html.append("<meta charset='UTF-8'>");
        html.append("<title>").append(reportTitle).append("</title>");
        html.append("<style>");
        html.append(getHtmlStyles());
        html.append("</style>");
        html.append("</head><body>");
        
        // Header
        html.append("<div class='header'>");
        html.append("<h1>").append(reportTitle).append("</h1>");
        html.append("<p class='user-info'>Generated by: ").append(userInfo).append("</p>");
        html.append("<p class='date'>Generated on: ").append(LocalDateTime.now().format(DATE_FORMATTER)).append("</p>");
        html.append("</div>");
        
        // Summary
        html.append("<div class='summary'>");
        html.append("<h2>Summary</h2>");
        html.append("<div class='stats'>");
        html.append("<div class='stat-item'>");
        html.append("<span class='stat-number'>").append(bulkRequests.size()).append("</span>");
        html.append("<span class='stat-label'>Total Requests</span>");
        html.append("</div>");
        
        Map<BulkRequestStatus, Long> statusCounts = bulkRequests.stream()
            .collect(java.util.stream.Collectors.groupingBy(
                BulkRequestDTO::getStatus, 
                java.util.stream.Collectors.counting()));
        
        for (BulkRequestStatus status : BulkRequestStatus.values()) {
            long count = statusCounts.getOrDefault(status, 0L);
            html.append("<div class='stat-item'>");
            html.append("<span class='stat-number'>").append(count).append("</span>");
            html.append("<span class='stat-label'>").append(status.name().replace("_", " ")).append("</span>");
            html.append("</div>");
        }
        
        html.append("</div></div>");
        
        // Table
        html.append("<div class='table-container'>");
        html.append("<h2>Bulk Requests Details</h2>");
        html.append("<table class='data-table'>");
        html.append("<thead>");
        html.append("<tr>");
        html.append("<th>Request ID</th>");
        html.append("<th>Customer</th>");
        html.append("<th>Contact</th>");
        html.append("<th>Location</th>");
        html.append("<th>Category</th>");
        html.append("<th>Weight</th>");
        html.append("<th>Status</th>");
        html.append("<th>Payment Status</th>");
        html.append("<th>Request Date</th>");
        html.append("<th>Scheduled Date</th>");
        html.append("</tr>");
        html.append("</thead>");
        html.append("<tbody>");
        
        for (BulkRequestDTO request : bulkRequests) {
            html.append("<tr>");
            html.append("<td>").append(request.getId()).append("</td>");
            html.append("<td>").append(request.getUserName()).append("</td>");
            html.append("<td>").append(request.getUserEmail()).append("</td>");
            html.append("<td>").append(request.getStreetAddress() + ", " + request.getCity()).append("</td>");
            html.append("<td>").append(request.getCategory() != null ? request.getCategory().name() : "N/A").append("</td>");
            html.append("<td>").append(request.getEstimatedWeight() != null ? request.getEstimatedWeight() + " kg" : "N/A").append("</td>");
            html.append("<td><span class='status status-").append(request.getStatus().name().toLowerCase()).append("'>")
                .append(request.getStatus().name().replace("_", " ")).append("</span></td>");
            html.append("<td><span class='payment-status payment-").append(request.getPaymentStatus().name().toLowerCase()).append("'>")
                .append(request.getPaymentStatus().name().replace("_", " ")).append("</span></td>");
            html.append("<td>").append(request.getCreatedAt() != null ? request.getCreatedAt().format(DATE_ONLY_FORMATTER) : "N/A").append("</td>");
            html.append("<td>").append(request.getScheduledDate() != null ? request.getScheduledDate().format(DATE_ONLY_FORMATTER) : "Not Scheduled").append("</td>");
            html.append("</tr>");
        }
        
        html.append("</tbody>");
        html.append("</table>");
        html.append("</div>");
        
        // Footer
        html.append("<div class='footer'>");
        html.append("<p>SmartBin Waste Management System</p>");
        html.append("<p>Report generated on ").append(LocalDateTime.now().format(DATE_FORMATTER)).append("</p>");
        html.append("</div>");
        
        html.append("</body></html>");
        
        return html.toString();
    }

    /**
     * Convert HTML to PDF using iText
     */
    public ByteArrayOutputStream convertHtmlToPdf(String html) throws IOException {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        HtmlConverter.convertToPdf(html, outputStream);
        return outputStream;
    }

    private void addReportHeader(Document document, String title, String userInfo) {
        document.add(new Paragraph(title)
            .setFontSize(18)
            .setBold()
            .setMarginBottom(10));
        
        document.add(new Paragraph("Generated by: " + userInfo)
            .setFontSize(10)
            .setMarginBottom(5));
        
        document.add(new Paragraph("Generated on: " + LocalDateTime.now().format(DATE_FORMATTER))
            .setFontSize(10)
            .setMarginBottom(20));
    }

    private void addSummarySection(Document document, List<BulkRequestDTO> bulkRequests) {
        document.add(new Paragraph("SUMMARY")
            .setFontSize(14)
            .setBold()
            .setMarginBottom(10));
        
        // Create summary table
        Table summaryTable = new Table(2);
        
        summaryTable.addCell(new Cell().add(new Paragraph("Total Requests").setBold()).setPadding(5));
        summaryTable.addCell(new Cell().add(new Paragraph(String.valueOf(bulkRequests.size()))).setPadding(5));
        
        // Count by status
        Map<BulkRequestStatus, Long> statusCounts = bulkRequests.stream()
            .collect(java.util.stream.Collectors.groupingBy(
                BulkRequestDTO::getStatus, 
                java.util.stream.Collectors.counting()));
        
        for (BulkRequestStatus status : BulkRequestStatus.values()) {
            long count = statusCounts.getOrDefault(status, 0L);
            summaryTable.addCell(new Cell().add(new Paragraph(status.name().replace("_", " ") + " Requests").setBold()).setPadding(5));
            summaryTable.addCell(new Cell().add(new Paragraph(String.valueOf(count))).setPadding(5));
        }
        
        document.add(summaryTable);
        document.add(new Paragraph().setMarginBottom(20));
    }

    private void addBulkRequestsTable(Document document, List<BulkRequestDTO> bulkRequests) {
        document.add(new Paragraph("BULK REQUESTS DETAILS")
            .setFontSize(14)
            .setBold()
            .setMarginBottom(10));
        
        // Create main table
        Table table = new Table(8);
        
        // Add header row
        String[] headers = {"ID", "Customer", "Contact", "Location", "Category", "Weight", "Status", "Request Date"};
        for (String header : headers) {
            table.addHeaderCell(new Cell().add(new Paragraph(header).setBold()).setPadding(5));
        }
        
        // Add data rows
        for (BulkRequestDTO request : bulkRequests) {
            table.addCell(new Cell().add(new Paragraph(String.valueOf(request.getId()))).setPadding(5));
            table.addCell(new Cell().add(new Paragraph(request.getUserName())).setPadding(5));
            table.addCell(new Cell().add(new Paragraph(request.getUserEmail())).setPadding(5));
            table.addCell(new Cell().add(new Paragraph(request.getStreetAddress() + ", " + request.getCity())).setPadding(5));
            table.addCell(new Cell().add(new Paragraph(request.getCategory() != null ? request.getCategory().name() : "N/A")).setPadding(5));
            table.addCell(new Cell().add(new Paragraph(request.getEstimatedWeight() != null ? request.getEstimatedWeight() + " kg" : "N/A")).setPadding(5));
            table.addCell(new Cell().add(new Paragraph(request.getStatus().name().replace("_", " "))).setPadding(5));
            table.addCell(new Cell().add(new Paragraph(
                request.getCreatedAt() != null ? request.getCreatedAt().format(DATE_ONLY_FORMATTER) : "N/A"
            )).setPadding(5));
        }
        
        document.add(table);
    }

    private void addReportFooter(Document document) {
        document.add(new Paragraph().setMarginTop(30));
        document.add(new Paragraph("SmartBin Waste Management System")
            .setFontSize(10)
            .setMarginTop(20));
        
        document.add(new Paragraph("Report generated on " + LocalDateTime.now().format(DATE_FORMATTER))
            .setFontSize(8)
            .setMarginBottom(10));
    }

    private String getHtmlStyles() {
        return """
            body { 
                font-family: Arial, sans-serif; 
                margin: 20px; 
                color: #333; 
            }
            .header { 
                text-align: center; 
                margin-bottom: 30px; 
                border-bottom: 2px solid #1a73e8; 
                padding-bottom: 20px; 
            }
            .header h1 { 
                color: #1a73e8; 
                margin-bottom: 10px; 
            }
            .user-info, .date { 
                margin: 5px 0; 
                font-size: 12px; 
                color: #666; 
            }
            .summary { 
                margin-bottom: 30px; 
            }
            .summary h2 { 
                color: #1a73e8; 
                border-bottom: 1px solid #ddd; 
                padding-bottom: 5px; 
            }
            .stats { 
                display: flex; 
                flex-wrap: wrap; 
                gap: 20px; 
                margin-top: 15px; 
            }
            .stat-item { 
                text-align: center; 
                padding: 15px; 
                background: #f8f9fa; 
                border-radius: 8px; 
                min-width: 120px; 
            }
            .stat-number { 
                display: block; 
                font-size: 24px; 
                font-weight: bold; 
                color: #1a73e8; 
            }
            .stat-label { 
                display: block; 
                font-size: 12px; 
                color: #666; 
                margin-top: 5px; 
            }
            .table-container { 
                margin-bottom: 30px; 
            }
            .table-container h2 { 
                color: #1a73e8; 
                border-bottom: 1px solid #ddd; 
                padding-bottom: 5px; 
            }
            .data-table { 
                width: 100%; 
                border-collapse: collapse; 
                margin-top: 15px; 
            }
            .data-table th, .data-table td { 
                border: 1px solid #ddd; 
                padding: 8px; 
                text-align: left; 
            }
            .data-table th { 
                background-color: #f8f9fa; 
                font-weight: bold; 
                color: #1a73e8; 
            }
            .data-table tr:nth-child(even) { 
                background-color: #f9f9f9; 
            }
            .status { 
                padding: 4px 8px; 
                border-radius: 4px; 
                font-size: 11px; 
                font-weight: bold; 
            }
            .status-pending { 
                background-color: #fff3cd; 
                color: #856404; 
            }
            .status-payment_completed { 
                background-color: #d4edda; 
                color: #155724; 
            }
            .status-scheduled { 
                background-color: #cce5ff; 
                color: #004085; 
            }
            .status-in_progress { 
                background-color: #ffeaa7; 
                color: #6c5ce7; 
            }
            .status-completed { 
                background-color: #d4edda; 
                color: #155724; 
            }
            .payment-status { 
                padding: 4px 8px; 
                border-radius: 4px; 
                font-size: 11px; 
                font-weight: bold; 
            }
            .payment-pending { 
                background-color: #fff3cd; 
                color: #856404; 
            }
            .payment-completed { 
                background-color: #d4edda; 
                color: #155724; 
            }
            .footer { 
                text-align: center; 
                margin-top: 40px; 
                padding-top: 20px; 
                border-top: 1px solid #ddd; 
                color: #666; 
                font-size: 10px; 
            }
            """;
    }
}
